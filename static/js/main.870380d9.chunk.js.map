{"version":3,"sources":["components/Header/index.tsx","components/Alert/index.jsx","components/PeriodView/index.tsx","components/PeriodForm/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Alert","PeriodView","props","useState","periods","setPeriods","newPeriod","toTimeString","date","getHours","getMinutes","handleCalculateTime","endDate","startDate","diff","getTime","hours","Math","floor","minutes","Date","useEffect","start","end","time","period","result","length","map","index","horas","minutos","forEach","p","getTotalHours","onClick","PeriodForm","setPeriod","formData","setFormData","handleInputChange","event","target","name","value","Number","split","stringToDate","id","onSubmit","preventDefault","document","getElementById","type","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.870380d9.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\nconst Header = () => {\n\n    return (\n        <div>\n            <header>\n                <div className=\"header__title\">\n                    Calcular jornada de trabalho\n                </div>\n            </header>\n        </div>\n    );\n\n}\n\n\nexport default Header;\n","import React from \"react\";\nimport './styles.css';\n\nconst Alert = () => {\n    return (\n        <div className=\"alert\">\n            Exemplo:\n            <p className=\"alert__text\">08:00 às 12:00 = 04:00</p>\n            <p className=\"alert__text\">13:00 às 17:30 = 04:30</p>\n            <span className=\"alert__separator\"/>\n            <p className=\"alert__text\">Total = 08:30 horas</p>\n        </div>\n    );\n}\n\nexport default Alert;\n","import React, {useEffect, useState} from 'react';\nimport './styles.css';\nimport {Period} from '../../core/Period';\n\ninterface PeriodsViewProps {\n    newPeriod: Period;\n}\n\nconst PeriodView: React.FC<PeriodsViewProps> = (props: PeriodsViewProps) => {\n\n    const [periods, setPeriods] = useState<Period[]>([]);\n    const {newPeriod} = props;\n\n    useEffect(() => {\n      if (newPeriod.start && newPeriod.end) {\n        const {start, end} = newPeriod;\n        const time = handleCalculateTime(end, start);\n        const result = new Date(0, 0, 0, time.getHours(), time.getMinutes(), 0);\n        const period: Period = {start, end, result};\n        setPeriods([...periods, period]);\n      }\n    }, [newPeriod]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    function toTimeString(date: Date): string {\n        return (date.getHours() > 9 ? date.getHours() : '0' + date.getHours())\n            + ':'\n            + (date.getMinutes() > 9 ? date.getMinutes() : '0' + date.getMinutes())\n    }\n\n    function handleCalculateTime(endDate: Date, startDate: Date): Date {\n        let diff = endDate.getTime() - startDate.getTime();\n        const hours = Math.floor(diff / 1000 / 60 / 60);\n        diff -= hours * 1000 * 60 * 60;\n        const minutes = Math.floor(diff / 1000 / 60);\n        return new Date(0, 0, 0, hours, minutes, 0);\n    }\n\n    function getTotalHours(): Date {\n        let horas = 0;\n        let minutos = 0;\n\n        periods.forEach(p => {\n            const time = handleCalculateTime(p.end, p.start);\n            horas += time.getHours();\n            minutos += time.getMinutes();\n        });\n\n        return new Date(0, 0, 0, horas, minutos, 0);\n    }\n\n    function clearPeriodsArray(): void {\n        setPeriods([]);\n    }\n\n    return (\n        <div className=\"times\">\n\n            {\n                periods.length > 0\n                    ? periods.map((period: Period, index: number) => {\n                        return (\n                            <p key={index} className=\"times__text\">\n                                {toTimeString(period.start)} às {toTimeString(period.end)} = {toTimeString(period.result)}\n                            </p>\n                        )\n                    })\n                    : (\n                        <div>\n                            <p className=\"times__text\">00:00 às 00:00 = 00:00</p>\n                            <p className=\"times__text\">00:00 às 00:00 = 00:00</p>\n                        </div>\n                    )\n            }\n\n            <hr className=\"times__separator\"/>\n\n            <p className=\"times__text-total\">\n                Total: &nbsp;\n                {\n                    periods.length > 0\n                        ? '' + toTimeString(getTotalHours())\n                        : ' 00:00'\n                }\n                <button className=\"times__button\" onClick={clearPeriodsArray}>Limpar</button>\n            </p>\n\n        </div>\n    );\n\n}\n\nexport default PeriodView;\n","import React, {ChangeEvent, FormEvent, useState} from 'react';\nimport './styles.css';\nimport {Period} from '../../core/Period';\nimport Alert from '../Alert';\nimport PeriodView from '../PeriodView';\n\nconst PeriodForm = () => {\n\n    const [period, setPeriod] = useState<Period>({} as Period);\n    const [formData, setFormData] = useState<Period>({} as Period);\n\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>): void {\n        const {name, value} = event.target;\n        const date = stringToDate(value);\n        setFormData({...formData, [name]: date});\n    }\n\n    function handleSubmit(event: FormEvent): void {\n        event.preventDefault();\n        const {start, end} = formData;\n\n        if (start && end) {\n            const result = new Date(0, 0, 0, 0, 0, 0);\n            const period: Period = {start, end, result};\n            setPeriod(period);\n            handleFormClear();\n        }\n    }\n\n    function handleFormClear(): void {\n        (document.getElementById('start') as HTMLInputElement).value = '';\n        (document.getElementById('end') as HTMLInputElement).value = '';\n        setFormData({} as Period);\n    }\n\n    function stringToDate(value: string): Date {\n        const hours: number = Number(value.split(':')[0]);\n        const minutes: number = Number(value.split(':')[1]);\n        return new Date(0, 0, 0, hours, minutes, 0);\n    }\n\n    return (\n        <div>\n            <div className=\"container\">\n\n                <Alert/>\n\n                <form id=\"formData\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <label className=\"form-group__label\">Início</label>\n                        <input className=\"form-group__input\"\n                               type=\"time\"\n                               name=\"start\"\n                               onChange={handleInputChange}\n                               id=\"start\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"form-group__label\">Fim</label>\n                        <input className=\"form-group__input\"\n                               type=\"time\"\n                               name=\"end\"\n                               onChange={handleInputChange}\n                               id=\"end\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"form-group__button\">Adicionar</button>\n                    </div>\n                </form>\n\n                <PeriodView newPeriod={period}/>\n\n            </div>\n        </div>\n    );\n\n}\n\nexport default PeriodForm;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport FormTime from './components/PeriodForm';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <FormTime/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}