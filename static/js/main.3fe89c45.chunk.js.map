{"version":3,"sources":["components/Header/index.tsx","shared/Alert/index.jsx","store/ducks/formTime.ts","components/PeriodForm/index.tsx","store/store.ts","components/PeriodView/index.tsx","App.tsx","index.tsx"],"names":["Header","className","Alert","Types","initialPeriod","PeriodForm","dispatch","useDispatch","useState","formData","setFormData","handleInputChange","event","target","name","date","value","hours","Number","split","minutes","Date","stringToDate","id","onSubmit","preventDefault","start","end","result","type","payload","formTimeActions","document","getElementById","onChange","required","rootReducer","combineReducers","formTime","state","action","store","createStore","PeriodView","newPeriod","useSelector","periods","setPeriods","toTimeString","getHours","getMinutes","handleCalculateTime","endDate","startDate","diff","getTime","Math","floor","useEffect","time","period","oldPeriods","length","map","index","horas","minutos","forEach","p","getTotalHours","onClick","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3fe89c45.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\nconst Header = () => {\n\n    return (\n        <header>\n            <div className=\"header__title\">\n                Calcular jornada de trabalho\n            </div>\n        </header>\n    );\n\n}\n\n\nexport default Header;\n","import React from \"react\";\nimport './styles.css';\n\nconst Alert = () => {\n    return (\n        <div className=\"alert\">\n            Exemplo:\n            <p className=\"alert__text\">08:00 às 12:00 = 04:00</p>\n            <p className=\"alert__text\">13:00 às 17:30 = 04:30</p>\n            <span className=\"alert__separator\"/>\n            <p className=\"alert__text\">Total = 08:30 horas</p>\n        </div>\n    );\n}\n\nexport default Alert;\n","import {Period} from '../../core/Period';\n\n/*\n * Arquivo com estrutura Ducks\n */\n\n// Action types\n\nexport const Types = {\n    SUBMIT_NEW_DATA: 'SUBMIT_NEW_DATA'\n}\n\n// Reducer\n\nconst initialPeriod: Period = {} as Period\n\nexport const FormTimeReducer = (state = initialPeriod, action: FormTimeAction): Period => {\n    switch (action.type) {\n        case Types.SUBMIT_NEW_DATA:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Actions Creators\n\nexport interface FormTimeAction {\n    type: any,\n    payload: Period\n}\n\nexport const formTimeActions = (formData: Period): FormTimeAction => {\n    return {\n        type: Types.SUBMIT_NEW_DATA,\n        payload: formData\n    }\n}\n\n\n\n\n","import React, {ChangeEvent, FormEvent, useState} from 'react';\nimport './styles.css';\nimport {Period} from '../../core/Period';\nimport Alert from '../../shared/Alert';\nimport {useDispatch} from 'react-redux';\nimport {formTimeActions} from '../../store/ducks/formTime';\n\nconst PeriodForm = () => {\n\n    const dispatch = useDispatch();\n    const [formData, setFormData] = useState<Period>({} as Period);\n\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>): void {\n        const {name, value} = event.target;\n        const date = stringToDate(value);\n        setFormData({...formData, [name]: date});\n    }\n\n    function handleSubmit(event: FormEvent): void {\n        event.preventDefault();\n        const {start, end} = formData;\n\n        if (start && end) {\n            const result = new Date(0, 0, 0, 0, 0, 0);\n            const period: Period = {start, end, result};\n            dispatch(formTimeActions(period));\n            handleFormClear();\n        }\n    }\n\n    function handleFormClear(): void {\n        (document.getElementById('start') as HTMLInputElement).value = '';\n        (document.getElementById('end') as HTMLInputElement).value = '';\n        setFormData({} as Period);\n    }\n\n    function stringToDate(value: string): Date {\n        const hours: number = Number(value.split(':')[0]);\n        const minutes: number = Number(value.split(':')[1]);\n        return new Date(0, 0, 0, hours, minutes, 0);\n    }\n\n    return (\n        <div className=\"container\">\n\n            <Alert/>\n\n            <form id=\"formData\" onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label className=\"form-group__label\">Início</label>\n                    <input className=\"form-group__input\"\n                           type=\"time\"\n                           name=\"start\"\n                           onChange={handleInputChange}\n                           required\n                           id=\"start\"/>\n                </div>\n                <div className=\"form-group\">\n                    <label className=\"form-group__label\">Fim</label>\n                    <input className=\"form-group__input\"\n                           type=\"time\"\n                           name=\"end\"\n                           onChange={handleInputChange}\n                           required\n                           id=\"end\"/>\n                </div>\n                <div className=\"form-group\">\n                    <button type=\"submit\" className=\"form-group__button\">Adicionar</button>\n                </div>\n            </form>\n\n        </div>\n    );\n\n}\n\nexport default PeriodForm;\n","import {combineReducers, createStore} from 'redux';\nimport {Period} from '../core/Period';\nimport {FormTimeReducer} from './ducks/formTime';\n\nexport interface RootState {\n    formTime: Period\n}\n\nconst rootReducer = combineReducers({\n    formTime: FormTimeReducer\n});\n\nexport const store = createStore(rootReducer);\n","import React, {useEffect, useState} from 'react';\nimport './styles.css';\nimport {Period} from '../../core/Period';\nimport {useSelector} from 'react-redux';\nimport {RootState} from '../../store/store';\n\nconst PeriodView = () => {\n\n    const newPeriod = useSelector((state: RootState) => state.formTime);\n    const [periods, setPeriods] = useState<Period[]>([]);\n\n    useEffect(() => {\n        if (!newPeriod?.start || !newPeriod?.end) return;\n        const {start, end} = newPeriod;\n        const time = handleCalculateTime(end, start);\n        const result = new Date(0, 0, 0, time.getHours(), time.getMinutes(), 0);\n        const period: Period = {start, end, result};\n        setPeriods(oldPeriods => [...oldPeriods, period]);\n    }, [newPeriod]);\n\n    function toTimeString(date: Date): string {\n        return (date.getHours() > 9 ? date.getHours() : '0' + date.getHours())\n            + ':'\n            + (date.getMinutes() > 9 ? date.getMinutes() : '0' + date.getMinutes())\n    }\n\n    function handleCalculateTime(endDate: Date, startDate: Date): Date {\n        let diff = endDate.getTime() - startDate.getTime();\n        const hours = Math.floor(diff / 1000 / 60 / 60);\n        diff -= hours * 1000 * 60 * 60;\n        const minutes = Math.floor(diff / 1000 / 60);\n        return new Date(0, 0, 0, hours, minutes, 0);\n    }\n\n    function getTotalHours(): Date {\n        let horas = 0;\n        let minutos = 0;\n\n        periods.forEach(p => {\n            const time = handleCalculateTime(p.end, p.start);\n            horas += time.getHours();\n            minutos += time.getMinutes();\n        });\n\n        return new Date(0, 0, 0, horas, minutos, 0);\n    }\n\n    function clearPeriodsArray(): void {\n        setPeriods([]);\n    }\n\n    return (\n        <div className=\"container\">\n\n            {\n                periods.length > 0\n                    ? periods.map((period: Period, index: number) => {\n                        return (\n                            <p key={index} className=\"times__text\">\n                                {toTimeString(period.start)} às {toTimeString(period.end)} = {toTimeString(period.result)}\n                            </p>\n                        )\n                    })\n                    : (\n                        <div>\n                            <p className=\"times__text\">00:00 às 00:00 = 00:00</p>\n                            <p className=\"times__text\">00:00 às 00:00 = 00:00</p>\n                        </div>\n                    )\n            }\n\n            <hr className=\"times__separator\"/>\n\n            <p className=\"times__text-total\">\n                Total: &nbsp;\n                {\n                    periods.length > 0\n                        ? '' + toTimeString(getTotalHours())\n                        : ' 00:00'\n                }\n                <button className=\"times__button\" onClick={clearPeriodsArray}>Limpar</button>\n            </p>\n\n        </div>\n    );\n\n}\n\nexport default PeriodView;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport PeriodForm from './components/PeriodForm';\nimport {Provider} from 'react-redux';\nimport {store} from './store/store';\nimport PeriodView from './components/PeriodView';\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <Header/>\n                <PeriodForm/>\n                <PeriodView/>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}